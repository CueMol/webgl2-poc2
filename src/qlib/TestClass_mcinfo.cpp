// -*-Mode: C++;-*-
//
// Auto-generated by mcwrapgen2.pl. Don't edit.
//
// $Id: TestClass_mcinfo.cpp,v 1.5 2007/11/29 12:10:18 rishitani Exp $

#include <common.h>
#include <qlib/LChar.hpp>
#include <qlib/LString.hpp>
#include <qlib/ClassRegistry.hpp>
#include <qlib/LClass.hpp>
using qlib::LClass;
using qlib::ClassRegistry;
#include <qlib/LVariant.hpp>

//
//  implementations for class test::ClassA
//
#include "TestClass.hpp"

static LClass *sClassObj_test_ClassA;

/////////////////

//static
LClass *test::ClassA::getClassObjS()
{
  return sClassObj_test_ClassA;
}

LClass *test::ClassA::getClassObj() const
{
  return sClassObj_test_ClassA;
}

//static
void test::ClassA::regClass()
{
  sClassObj_test_ClassA = MB_NEW qlib::LSpecificClass<test::ClassA>("test::ClassA");
  
  ClassRegistry *pMgr = ClassRegistry::getInstance();
  pMgr->regClassObj(sClassObj_test_ClassA);
}



//
//  implementations for class test::ClassB
//

static LClass *sClassObj_test_ClassB;

/////////////////

//static
LClass *test::ClassB::getClassObjS()
{
  return sClassObj_test_ClassB;
}

LClass *test::ClassB::getClassObj() const
{
  return sClassObj_test_ClassB;
}

//static
void test::ClassB::regClass()
{
  sClassObj_test_ClassB = MB_NEW qlib::LSpecificClass<test::ClassB>("test::ClassB");
  
  ClassRegistry *pMgr = ClassRegistry::getInstance();
  pMgr->regClassObj(sClassObj_test_ClassB);
}


// property handler implementations

bool test::ClassB::hasProperty(const qlib::LString &propnm) const
{
    if (propnm.equals("prop3")) return true;
    if (propnm.equals("prop4")) return true;
    if (test::ClassA::hasProperty(propnm)) return true;
    return false;
}

bool test::ClassB::setPropImpl(const qlib::LString &propnm, const qlib::LVariant &val)
{
  if (propnm=="prop3") {
    return test::ClassB::set_prop3_PropImpl(val);
  }
  if (propnm=="prop4") {
    return test::ClassB::set_prop4_PropImpl(val);
  }
    if (test::ClassA::setPropImpl(propnm, val)) return true;

  return false;
}
bool test::ClassB::set_prop3_PropImpl(const qlib::LVariant &val)
{
    if (!val.isInt()) return false;
    m_nProp3 = val.getIntValue();
    return true;
}

bool test::ClassB::set_prop4_PropImpl(const qlib::LVariant &val)
{
    if (!val.isString()) return false;
    m_strProp4 = val.getStringValue();
    return true;
}

bool test::ClassB::getPropImpl(const qlib::LString &propnm, qlib::LVariant &result) const
{
  if (propnm=="prop3") {
    test::ClassB::get_prop3_PropImpl(result);
    return true;
  }
  if (propnm=="prop4") {
    test::ClassB::get_prop4_PropImpl(result);
    return true;
  }
    if (test::ClassA::getPropImpl(propnm, result)) return true;
  return false;
}

void test::ClassB::get_prop3_PropImpl(qlib::LVariant &result) const
{
  result.setIntValue(m_nProp3);
  return;
}

void test::ClassB::get_prop4_PropImpl(qlib::LVariant &result) const
{
  result.setStringValue(m_strProp4);
  return;
}

const char *test::ClassB::getPropTypeName(const char *propnm) const
{
    if (qlib::LChar::equals("prop3", propnm))
        return "int";
    if (qlib::LChar::equals("prop4", propnm))
        return "LString";
    return test::ClassA::getPropTypeName(propnm);

    return "";
}
void test::ClassB::getPropNamesImpl(std::set<qlib::LString> &arg1) const
{
    arg1.insert("prop3");
    arg1.insert("prop4");
    test::ClassA::getPropNamesImpl(arg1);
}

bool test::ClassB::hasMethod(const qlib::LString &mthnm) const
{
    if (mthnm.equals("toString")) return true;
    if (test::ClassA::hasMethod(mthnm)) return true;

    return false;
}

bool test::ClassB::invokeMethod(const qlib::LString &mthnm, qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs==0 && mthnm.equals("toString")) {
    return test::ClassB::invoke_toString_Impl(args);
  }

    if (test::ClassA::invokeMethod(mthnm, args)) return true;
  return false;
}

bool test::ClassB::invoke_toString_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LString rval = this->toString();

    args.retval().setStringValue(rval);
    return true;
}



//
//  implementations for class test::ClassC
//

static LClass *sClassObj_test_ClassC;

/////////////////

//static
LClass *test::ClassC::getClassObjS()
{
  return sClassObj_test_ClassC;
}

LClass *test::ClassC::getClassObj() const
{
  return sClassObj_test_ClassC;
}

//static
void test::ClassC::regClass()
{
  sClassObj_test_ClassC = MB_NEW qlib::LSpecificClass<test::ClassC>("test::ClassC");
  
  ClassRegistry *pMgr = ClassRegistry::getInstance();
  pMgr->regClassObj(sClassObj_test_ClassC);
}


// property handler implementations

bool test::ClassC::hasProperty(const qlib::LString &propnm) const
{
    if (propnm.equals("prop3")) return true;
    if (propnm.equals("prop4")) return true;
    if (propnm.equals("prop5")) return true;
    if (test::ClassA::hasProperty(propnm)) return true;
    return false;
}

bool test::ClassC::setPropImpl(const qlib::LString &propnm, const qlib::LVariant &val)
{
  if (propnm=="prop3") {
    return test::ClassC::set_prop3_PropImpl(val);
  }
  if (propnm=="prop4") {
    return test::ClassC::set_prop4_PropImpl(val);
  }
  if (propnm=="prop5") {
    return test::ClassC::set_prop5_PropImpl(val);
  }
    if (test::ClassA::setPropImpl(propnm, val)) return true;

  return false;
}
bool test::ClassC::set_prop3_PropImpl(const qlib::LVariant &val)
{
    if (!val.isReal()) return false;
    m_dProp3 = val.getRealValue();
    return true;
}

bool test::ClassC::set_prop4_PropImpl(const qlib::LVariant &val)
{
    if (!val.isBool()) return false;
    m_bProp4 = val.getBoolValue();
    return true;
}

bool test::ClassC::set_prop5_PropImpl(const qlib::LVariant &val)
{
    if (!val.isObject()) return false;
    qlib::LScriptable *pObj = val.getObjectValue();
    // MB_ASSERT(pObj!=NULL);
    if (m_pObjProp5!=NULL) {
      m_pObjProp5->destruct();
      m_pObjProp5 = NULL;
    }
    m_pObjProp5 = dynamic_cast<test::ClassA *>(pObj->copy());
    return true;
}

bool test::ClassC::getPropImpl(const qlib::LString &propnm, qlib::LVariant &result) const
{
  if (propnm=="prop3") {
    test::ClassC::get_prop3_PropImpl(result);
    return true;
  }
  if (propnm=="prop4") {
    test::ClassC::get_prop4_PropImpl(result);
    return true;
  }
  if (propnm=="prop5") {
    test::ClassC::get_prop5_PropImpl(result);
    return true;
  }
    if (test::ClassA::getPropImpl(propnm, result)) return true;
  return false;
}

void test::ClassC::get_prop3_PropImpl(qlib::LVariant &result) const
{
  result.setRealValue(m_dProp3);
  return;
}

void test::ClassC::get_prop4_PropImpl(qlib::LVariant &result) const
{
  result.setBoolValue(m_bProp4);
  return;
}

void test::ClassC::get_prop5_PropImpl(qlib::LVariant &result) const
{
  result.setObjectValue(m_pObjProp5->copy());
  return;
}

const char *test::ClassC::getPropTypeName(const char *propnm) const
{
    if (qlib::LChar::equals("prop3", propnm))
        return "LReal";
    if (qlib::LChar::equals("prop4", propnm))
        return "bool";
    if (qlib::LChar::equals("prop5", propnm))
        return "test::ClassA*";
    return test::ClassA::getPropTypeName(propnm);

    return "";
}
void test::ClassC::getPropNamesImpl(std::set<qlib::LString> &arg1) const
{
    arg1.insert("prop3");
    arg1.insert("prop4");
    arg1.insert("prop5");
    test::ClassA::getPropNamesImpl(arg1);
}

bool test::ClassC::hasMethod(const qlib::LString &mthnm) const
{
    if (mthnm.equals("getObjProp5")) return true;
    if (mthnm.equals("setObjProp5")) return true;
    if (mthnm.equals("toString")) return true;
    if (test::ClassA::hasMethod(mthnm)) return true;

    return false;
}

bool test::ClassC::invokeMethod(const qlib::LString &mthnm, qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs==0 && mthnm.equals("getObjProp5")) {
    return test::ClassC::invoke_getObjProp5_Impl(args);
  }
  if (nargs==1 && mthnm.equals("setObjProp5")) {
    return test::ClassC::invoke_setObjProp5_Impl(args);
  }
  if (nargs==0 && mthnm.equals("toString")) {
    return test::ClassC::invoke_toString_Impl(args);
  }

    if (test::ClassA::invokeMethod(mthnm, args)) return true;
  return false;
}

bool test::ClassC::invoke_getObjProp5_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LScriptable *rval = this->getObjProp5()->copy();

    args.retval().setObjectValue(rval);
    return true;
}

bool test::ClassC::invoke_setObjProp5_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isObject()) return false;
    qlib::LScriptable *arg0 = args.at(0).getObjectValue();

    this->setObjProp5((dynamic_cast<test::ClassA*>(arg0)));

    args.setRetVoid();
    return true;
}

bool test::ClassC::invoke_toString_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LString rval = this->toString();

    args.retval().setStringValue(rval);
    return true;
}



// -*-Mode: C++;-*-
//
// Auto-generated by mcwrapgen2.pl. Don't edit.
//
// $Id: Vector4D_mcinfo.cpp,v 1.7 2007/11/29 12:10:18 rishitani Exp $

#include <common.h>
#include <qlib/LChar.hpp>
#include <qlib/LString.hpp>
#include <qlib/ClassRegistry.hpp>
#include <qlib/LClass.hpp>
using qlib::LClass;
using qlib::ClassRegistry;
#include <qlib/LVariant.hpp>

//
//  implementations for class qlib::Vector4D
//
#include "Vector4D.hpp"

static LClass *sClassObj_qlib_Vector4D;

/////////////////

//static
LClass *qlib::Vector4D::getClassObjS()
{
  return sClassObj_qlib_Vector4D;
}

LClass *qlib::Vector4D::getClassObj() const
{
  return sClassObj_qlib_Vector4D;
}

//static
void qlib::Vector4D::regClass()
{
  sClassObj_qlib_Vector4D = MB_NEW qlib::LSpecificClass<qlib::Vector4D>("qlib::Vector4D");
  
  ClassRegistry *pMgr = ClassRegistry::getInstance();
  pMgr->regClassObj(sClassObj_qlib_Vector4D);
}

qlib::LCloneableObject *qlib::Vector4D::clone() const
{
  return MB_NEW qlib::Vector4D(*this);
}


// property handler implementations

bool qlib::Vector4D::hasProperty(const qlib::LString &propnm) const
{
    if (propnm.equals("teststr")) return true;
    if (propnm.equals("w")) return true;
    if (propnm.equals("x")) return true;
    if (propnm.equals("y")) return true;
    if (propnm.equals("z")) return true;
    return false;
}

bool qlib::Vector4D::setPropImpl(const qlib::LString &propnm, const qlib::LVariant &val)
{
  if (propnm=="teststr") {
    return qlib::Vector4D::set_teststr_PropImpl(val);
  }
  if (propnm=="w") {
    return qlib::Vector4D::set_w_PropImpl(val);
  }
  if (propnm=="x") {
    return qlib::Vector4D::set_x_PropImpl(val);
  }
  if (propnm=="y") {
    return qlib::Vector4D::set_y_PropImpl(val);
  }
  if (propnm=="z") {
    return qlib::Vector4D::set_z_PropImpl(val);
  }

  return false;
}
bool qlib::Vector4D::set_teststr_PropImpl(const qlib::LVariant &val)
{
    if (!val.isString()) return false;
    m_testStr = val.getStringValue();
    return true;
}

bool qlib::Vector4D::set_w_PropImpl(const qlib::LVariant &val)
{
    if (!val.isReal()) return false;
    m_pdat->w = val.getRealValue();
    return true;
}

bool qlib::Vector4D::set_x_PropImpl(const qlib::LVariant &val)
{
    if (!val.isReal()) return false;
    m_pdat->x = val.getRealValue();
    return true;
}

bool qlib::Vector4D::set_y_PropImpl(const qlib::LVariant &val)
{
    if (!val.isReal()) return false;
    m_pdat->y = val.getRealValue();
    return true;
}

bool qlib::Vector4D::set_z_PropImpl(const qlib::LVariant &val)
{
    if (!val.isReal()) return false;
    m_pdat->z = val.getRealValue();
    return true;
}

bool qlib::Vector4D::getPropImpl(const qlib::LString &propnm, qlib::LVariant &result) const
{
  if (propnm=="teststr") {
    qlib::Vector4D::get_teststr_PropImpl(result);
    return true;
  }
  if (propnm=="w") {
    qlib::Vector4D::get_w_PropImpl(result);
    return true;
  }
  if (propnm=="x") {
    qlib::Vector4D::get_x_PropImpl(result);
    return true;
  }
  if (propnm=="y") {
    qlib::Vector4D::get_y_PropImpl(result);
    return true;
  }
  if (propnm=="z") {
    qlib::Vector4D::get_z_PropImpl(result);
    return true;
  }
  return false;
}

void qlib::Vector4D::get_teststr_PropImpl(qlib::LVariant &result) const
{
  result.setStringValue(m_testStr);
  return;
}

void qlib::Vector4D::get_w_PropImpl(qlib::LVariant &result) const
{
  result.setRealValue(m_pdat->w);
  return;
}

void qlib::Vector4D::get_x_PropImpl(qlib::LVariant &result) const
{
  result.setRealValue(m_pdat->x);
  return;
}

void qlib::Vector4D::get_y_PropImpl(qlib::LVariant &result) const
{
  result.setRealValue(m_pdat->y);
  return;
}

void qlib::Vector4D::get_z_PropImpl(qlib::LVariant &result) const
{
  result.setRealValue(m_pdat->z);
  return;
}

const char *qlib::Vector4D::getPropTypeName(const char *propnm) const
{
    if (qlib::LChar::equals("teststr", propnm))
        return "LString";
    if (qlib::LChar::equals("w", propnm))
        return "LReal";
    if (qlib::LChar::equals("x", propnm))
        return "LReal";
    if (qlib::LChar::equals("y", propnm))
        return "LReal";
    if (qlib::LChar::equals("z", propnm))
        return "LReal";

    return "";
}
void qlib::Vector4D::getPropNamesImpl(std::set<qlib::LString> &arg1) const
{
    arg1.insert("teststr");
    arg1.insert("w");
    arg1.insert("x");
    arg1.insert("y");
    arg1.insert("z");
}

bool qlib::Vector4D::hasMethod(const qlib::LString &mthnm) const
{
    if (mthnm.equals("angle")) return true;
    if (mthnm.equals("cross")) return true;
    if (mthnm.equals("divide")) return true;
    if (mthnm.equals("dot")) return true;
    if (mthnm.equals("equals")) return true;
    if (mthnm.equals("isZero")) return true;
    if (mthnm.equals("length")) return true;
    if (mthnm.equals("normalize")) return true;
    if (mthnm.equals("scale")) return true;
    if (mthnm.equals("set_xyz")) return true;
    if (mthnm.equals("set_xyzw")) return true;
    if (mthnm.equals("sqlen")) return true;
    if (mthnm.equals("toString")) return true;

    return false;
}

bool qlib::Vector4D::invokeMethod(const qlib::LString &mthnm, qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs==1 && mthnm.equals("angle")) {
    return qlib::Vector4D::invoke_angle_Impl(args);
  }
  if (nargs==1 && mthnm.equals("cross")) {
    return qlib::Vector4D::invoke_cross_Impl(args);
  }
  if (nargs==1 && mthnm.equals("divide")) {
    return qlib::Vector4D::invoke_divide_Impl(args);
  }
  if (nargs==1 && mthnm.equals("dot")) {
    return qlib::Vector4D::invoke_dot_Impl(args);
  }
  if (nargs==1 && mthnm.equals("equals")) {
    return qlib::Vector4D::invoke_equals_Impl(args);
  }
  if (nargs==0 && mthnm.equals("isZero")) {
    return qlib::Vector4D::invoke_isZero_Impl(args);
  }
  if (nargs==0 && mthnm.equals("length")) {
    return qlib::Vector4D::invoke_length_Impl(args);
  }
  if (nargs==0 && mthnm.equals("normalize")) {
    return qlib::Vector4D::invoke_normalize_Impl(args);
  }
  if (nargs==1 && mthnm.equals("scale")) {
    return qlib::Vector4D::invoke_scale_Impl(args);
  }
  if (nargs==3 && mthnm.equals("set_xyz")) {
    return qlib::Vector4D::invoke_set_xyz_Impl(args);
  }
  if (nargs==4 && mthnm.equals("set_xyzw")) {
    return qlib::Vector4D::invoke_set_xyzw_Impl(args);
  }
  if (nargs==0 && mthnm.equals("sqlen")) {
    return qlib::Vector4D::invoke_sqlen_Impl(args);
  }
  if (nargs==0 && mthnm.equals("toString")) {
    return qlib::Vector4D::invoke_toString_Impl(args);
  }

  return false;
}

bool qlib::Vector4D::invoke_angle_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isObject()) return false;
    qlib::LScriptable *arg0 = args.at(0).getObjectValue();

    LReal rval = this->angle(*(dynamic_cast<qlib::Vector4D*>(arg0)));

    args.retval().setRealValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_cross_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isObject()) return false;
    qlib::LScriptable *arg0 = args.at(0).getObjectValue();

    LScriptable *rval = this->cross(*(dynamic_cast<qlib::Vector4D*>(arg0))).copy();

    args.retval().setObjectValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_divide_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isReal()) return false;
    qlib::LReal arg0 = args.at(0).getRealValue();

    LScriptable *rval = this->divide(arg0).copy();

    args.retval().setObjectValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_dot_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isObject()) return false;
    qlib::LScriptable *arg0 = args.at(0).getObjectValue();

    LReal rval = this->dot(*(dynamic_cast<qlib::Vector4D*>(arg0)));

    args.retval().setRealValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_equals_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isObject()) return false;
    qlib::LScriptable *arg0 = args.at(0).getObjectValue();

    LBool rval = this->equals(*(dynamic_cast<qlib::Vector4D*>(arg0)));

    args.retval().setBoolValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_isZero_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LBool rval = this->isZero();

    args.retval().setBoolValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_length_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LReal rval = this->length();

    args.retval().setRealValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_normalize_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LScriptable *rval = this->normalize().copy();

    args.retval().setObjectValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_scale_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=1) return false;

    if (!args.at(0).isReal()) return false;
    qlib::LReal arg0 = args.at(0).getRealValue();

    LScriptable *rval = this->scale(arg0).copy();

    args.retval().setObjectValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_set_xyz_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=3) return false;

    if (!args.at(0).isReal()) return false;
    qlib::LReal arg0 = args.at(0).getRealValue();
    if (!args.at(1).isReal()) return false;
    qlib::LReal arg1 = args.at(1).getRealValue();
    if (!args.at(2).isReal()) return false;
    qlib::LReal arg2 = args.at(2).getRealValue();

    this->set(arg0,arg1,arg2);

    args.setRetVoid();
    return true;
}

bool qlib::Vector4D::invoke_set_xyzw_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=4) return false;

    if (!args.at(0).isReal()) return false;
    qlib::LReal arg0 = args.at(0).getRealValue();
    if (!args.at(1).isReal()) return false;
    qlib::LReal arg1 = args.at(1).getRealValue();
    if (!args.at(2).isReal()) return false;
    qlib::LReal arg2 = args.at(2).getRealValue();
    if (!args.at(3).isReal()) return false;
    qlib::LReal arg3 = args.at(3).getRealValue();

    this->set(arg0,arg1,arg2,arg3);

    args.setRetVoid();
    return true;
}

bool qlib::Vector4D::invoke_sqlen_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LReal rval = this->sqlen();

    args.retval().setRealValue(rval);
    return true;
}

bool qlib::Vector4D::invoke_toString_Impl(qlib::LVarArgs &args)
{
  const int nargs = args.getSize();
  if (nargs!=0) return false;


    LString rval = this->toString();

    args.retval().setStringValue(rval);
    return true;
}


